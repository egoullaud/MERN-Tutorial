David Gray MERN Tutorial

MongoDB
Express JS
React
Node JS

Create = POST
Read = GET
Update = PUT/PATCH
Delete = DELETE

Client interview - create markdown file checklist User Stories.md to make list of action items for project
preview with control-shift-v

open terminal hack - ctrl and `
copy/paste body text = highlight code then shift+alt+down arrow

build app THEN authetication last

put node_modules in gitignore - we don't need them on github

how to remove folder from github, not from local
git rm -r --cached myFolder

add following: nodemon and express and write the following scripts:
"start": "node server",
"dev" : "nodemon server"

Setting up Server!

1. create server.js file and import express and path and set up port for server to run:
   const express = require('express');
   const app = express();
   const path = require('path');
   const PORT = process.env.PORT || 3500;
2. Tell the app to "listen" so it runs server on port: this will go last on the server.js
   app.listen(PORT, () => console.log(`Server running on ${PORT}`));

3. Tell express where to find static files like html and css: (look in the public directory)
   app.use('/', express.static(path.join(\_\_dirname, '/public')));

4. Create Public folder and CSS folder to add some basic styles to app

5. Create Routes folder and root.js file - time to create a router for the app

6. import express, router, and path:
   const express = require('express');
   const router = express.Router();
   const path = require('path');

7. get function for router:  
    notes:
   "^" = at beginning of string only
   "$" = at end of the string only
"|" = or
"()?" = optional 
code is: 
router.get('^/$|/index(.html)?', (req,res) => {
   //response is to send the file from path (directoryName/../views/index.html)
   res.sendFile(path.join(\_\_dirname, '..','views','index.html'))
   });

8. export the module!
   module.exports = router

9. Create views folder and index.html file (shortcut is "!" will auto generate html)
   -import link to css sheet and change title, add h1

- app can find it because we set up a route to the static files

10. Create 404 html page inside views folder

11. back to server.js to handle any file not found _ add this after other routes, before the listen
    "_" = all
    everything that reaches this will get funneled through:
    app.all('\*', (req,res) => {
    // set status to error 404
    res.status(404)

//if request has "accepts header" in HTML then send views/404.html file
if(req.accepts('html')) {
res.sendFile(path.join(\_\_dirname, 'views', '404.html'))

//if request has "accepts header" in json then send message
} else if (req.accepts('json')) {
res.json({ message: '404 Not Found'})
} else {

//if request is type txt then send message
res.type('txt').send('404 not found')
}
})

\*Test in the browser
End of Lesson 1!

Lesson 2
what is middleware?

- one or more functions put in the middle of a HTTP request that is received by the API
- can add additional functionality and preliminary request
  types:

a. Built-in
eg. express.static() and app.use(express.json())
b. Custom
c. 3rd Party

Add Built in and Custom

1. add built-in: Need to add JSON to our application so our server can parse incoming json
   app.use(express.json())
2. create logs folder - add to gitignore file
3. create middleware folder - new file called logger.js
4. install deps: npm i date-fns uuid
5. import format, version uuid, path, and promises
   const {format} = requre('date-fns')
   const {v4: uuid} = require('uuid')
   const fs = require('fs')
   const fsPromises = require('fs').promises
   const path=require('path')
6. create logEvents function
   const logEvents = async (message, logFileName) => {
   const dateTime = `${format(new Date(), 'yyyMMdd\tHH:mm:ss')}`
   const logItem = `${dateTime}\t${uuid()}\t${message}\n`

}
-template literal to format dates is from date-fns documentation
-uuid create specific id number for each log item

- "/n" creates new line

7. Let's ask the server to look for a logs folder with an if statement:
   if(!fs.existsSync(path.join(\_\_dirname, '..', 'logs')))

- if it doesnt exist, then we will create it with:
  await fsPromises.mkdir(path.join(\_\_dirname, '..', 'logs'))

8. once we find the directory, or we create it, let's add the file to it with:
   await fsPromises.appendFile(path.join(\_\_dirname, '..', 'logs',
   logFileName), logItem)
9. catch the errors with:
   catch(err) {
   console.log(err)
   }
10. write the actual middleware that will write the template literal into the log which is like a conventional text file:
    const logger= (req, res, next) =>{
    logEvents(`${req.method}\t${req.url}\t${req.headers.origin}`, 'reqLog.log')
    console.log(`${req.method} ${req.path}`)
    next()
    }
    \*recommends adding conditions to limit which requests are logged (only from other urls or something) otherwise the log will fill up fast.
11. add module exports
    module.exports = {logEvents, logger}

12. off to server.js to import logger with:
    const {logger} = require('./middleware/logger')
    add to app before other middleware: app.use(logger)

13. Create custom middleware to log errors!

- add errorHandler.js to middleware folder
- create function to log errors:
  const errorHandler = ( err, req, res, next ) => {
  logEvents(`${err.name}: ${err.message}\t${req.method}\t${req.url}\t${req.headers.origin}`,
  'errLog.log')
  }

14. check error to find status code
    const status = res.statusCode ? res.statusCode : 500 //server error
    //set status
    res.status(status)
    res.json({ message: err.message })

15. export module and import it to server.js
    const errorHandler = require('./middleware/errorHandler')

16. add it above listener below everything else.
    app.use(errorHandler)

Adding 3rd Party middleware!

17. add cookie parser to deps
    npm i cookie-parser

18. import and use in server.js
    const cookieParser = require('cookie-parser')

- pop it below json: app.use(cookieParser())
  EASY!

19. Not so Easy CORS
    CORS = Cross Origin Resource Sharing

- need this so api can be accessed by something like google (like its a public API)
- we will code up a "pre-flight" auth like the api is public and then secure it afterwards.

install cors: npm i cors

use it like a public API: app.use(cors())

20. make it secure using cors options

- make a congif folder
- add allowedOrigins file and include the http links associated with the application, and the localhost links
- add corsOptions file and import allowed origins
  create cors options function:
  const corsOptions = {
  //origin, credentials, optionsSuccessStatus are all methods
  origin: (origin, callback) => {
  //to allow the https we specified, ||OR no origin so you can use postman to view api
  if (allowedOrigins.indexOf(origin) !== -1 || !origin) {
  callback(null, true)
  } else {
  callback(new Error('Not allowed by CORS'))
  }
  },
  credentials: true,
  optionsSuccessStatus: 200
  }
- import corsOptions and pass into cors argument to secure API use
  app.use(cors(corsOptions))
  \*\*Note to self - when you're trying to test CORS with google.... actually go to google.com you fool.

Lesson 3! MongoDB

1. install environment variables: npm i dotenv and add it to server.js as:
   require('dotenv').config()
   makes available throughout app
   add it to the gitignore

2. Set up MongoDB account
   with name TechNotes DB and collections: users
   - Create new project
   - add collection to cluster
   - connect from anywhere
   - copy access strong and paste into .env file and replace password and add database name
     in between / and ?retryWrites
3. install mongoose to better communicate with mongoDB
   npm i mongoose
4. create model folder with User.js <- we are creating schemas!
   import mongoose and create userSchema function:
   const userSchema = new mongoose.Schema({
   //data model goes here
   username: {
   type: String,
   required: true
   },
   password: {
   type: String,
   required: true
   },
   //this is an array, data within will be a string
   roles: [{
   type: String,
   default:"Employee"
   }],
   active: {
   type: Boolean,
   default: true
   }
   })

- look back at user stories to determine what data we need in our schema
  username and PW
  user roles
  active status

make model then export as:

module.exports = mongoose.model('User', userSchema) <- name it, then choose function

5. ticket numbers in sequence -> install npm i mongoose-sequence
   import: const AutoIncrement = require('mongoose-sequence')(mongoose)

{
//timestamps are options in mongoDB
timestamps: true
}
)
//use sequence to make ticket numbers
noteSchema.plugin(AutoIncrement, {
inc_field: 'ticket',
id: 'ticketNums',
start_seq: 500
})
